package AllCollection.Arraylist;import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.Deque;
import java.util.HashMap;
import java.util.Map;

public class PipelineQueries {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        int Q = Integer.parseInt(br.readLine());
        Deque<Integer> pipeline = new ArrayDeque<>();
        Map<Integer, Integer> frequency = new HashMap<>();
        
        StringBuilder result = new StringBuilder();
        
        for (int i = 0; i < Q; i++) {
            String[] query = br.readLine().split(" ");
            int x = Integer.parseInt(query[0]);
            int N = Integer.parseInt(query[1]);
            
            if (x == 1) {
                pipeline.addFirst(N);
                frequency.put(N, frequency.getOrDefault(N, 0) + 1);
            } else if (x == 2) {
                if (!pipeline.isEmpty()) {
                    int maxFreq = 0;
                    int mostFrequent = -1;
                    
                    for (int num : pipeline) {
                        int freq = frequency.get(num);
                        if (freq > maxFreq || (freq == maxFreq && pipeline.getFirst() == num)) {
                            maxFreq = freq;
                            mostFrequent = num;
                        }
                    }
                    
                    pipeline.removeFirstOccurrence(mostFrequent);
                    frequency.put(mostFrequent, frequency.get(mostFrequent) - 1);
                    result.append(mostFrequent).append(" ");
                } else {
                    result.append("-1").append(" ");
                }
            }
        }
        
        System.out.println(result.toString().trim());
    }
}
